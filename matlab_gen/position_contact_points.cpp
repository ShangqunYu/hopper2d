//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// position_contact_points.cpp
//
// Code generation for function 'position_contact_points'
//

// Include files
#include "position_contact_points.h"
#include <cmath>

// Function Definitions
void position_contact_points(const double in1[12], const double in2[17],
                             double out1[27])
{
  double out1_tmp;
  double t13;
  double t14;
  double t21;
  double t22;
  double t23;
  double t4;
  double t6;
  // POSITION_CONTACT_POINTS
  //     OUT1 = POSITION_CONTACT_POINTS(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     25-Sep-2022 00:50:45
  t4 = in1[2] + in1[3];
  t6 = in1[4] + t4;
  t13 = in2[16] * std::cos(in1[2]) / 2.0;
  t14 = in2[16] * std::sin(in1[2]) / 2.0;
  t21 = (in1[5] + t6) + 1.5707963267948966;
  t22 = std::cos(t21);
  t23 = std::sin(t21);
  out1[0] = in1[0];
  out1[1] = in1[1];
  out1[2] = 0.0;
  out1_tmp = in2[11] * std::sin(t4) + t14;
  out1[3] = out1_tmp + in1[0];
  t4 = -(in2[11] * std::cos(t4)) + -t13;
  out1[4] = t4 + in1[1];
  out1[5] = 0.0;
  out1_tmp = (out1_tmp + in2[12] * std::sin(t6)) + in1[0];
  out1[6] = out1_tmp - in2[14] * t23;
  t4 = (t4 + -(in2[12] * std::cos(t6))) + in1[1];
  out1[7] = t4 + in2[14] * t22;
  out1[8] = t21;
  out1[9] = out1_tmp;
  out1[10] = t4;
  out1[11] = t21;
  out1[12] = out1_tmp + in2[13] * t23;
  out1[13] = t4 - in2[13] * t22;
  out1[14] = t21;
  out1_tmp = -t13 + -t14;
  out1[15] = out1_tmp + in1[0];
  t4 = t13 + -t14;
  out1[16] = t4 + in1[1];
  out1[17] = 0.0;
  out1[18] = t4 + in1[0];
  t4 = t13 + t14;
  out1[19] = t4 + in1[1];
  out1[20] = 0.0;
  out1[21] = t4 + in1[0];
  t4 = t14 + -t13;
  out1[22] = t4 + in1[1];
  out1[23] = 0.0;
  out1[24] = t4 + in1[0];
  out1[25] = out1_tmp + in1[1];
  out1[26] = 0.0;
}

// End of code generation (position_contact_points.cpp)
