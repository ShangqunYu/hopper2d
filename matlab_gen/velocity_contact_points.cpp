//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// velocity_contact_points.cpp
//
// Code generation for function 'velocity_contact_points'
//

// Include files
#include "velocity_contact_points.h"
#include <cmath>

// Function Definitions
void velocity_contact_points(const double in1[12], const double in2[17],
                             double out1[27])
{
  double out1_tmp;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t22;
  double t24;
  double t26;
  double t27;
  double t30;
  double t31;
  double t4;
  double t6;
  // VELOCITY_CONTACT_POINTS
  //     OUT1 = VELOCITY_CONTACT_POINTS(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     25-Sep-2022 00:50:45
  t4 = in1[2] + in1[3];
  t11 = ((in1[9] + in1[10]) + in1[11]) + in1[8];
  t6 = in1[4] + t4;
  t14 = in2[16] * std::cos(in1[2]) / 2.0;
  t15 = in2[16] * std::sin(in1[2]) / 2.0;
  t12 = in2[11] * std::cos(t4);
  t13 = in2[11] * std::sin(t4);
  t4 = (in1[5] + t6) + 1.5707963267948966;
  t16 = in2[12] * std::cos(t6);
  t17 = in2[12] * std::sin(t6);
  t6 = std::cos(t4);
  t4 = std::sin(t4);
  t30 = in1[8] * (t14 + t15);
  t22 = in2[13] * t6;
  t24 = in2[13] * t4;
  t31 = in1[8] * (t14 + -t15);
  t26 = -(in2[14] * t6);
  t27 = -(in2[14] * t4);
  out1[0] = in1[6];
  out1[1] = in1[7];
  out1[2] = 0.0;
  out1_tmp = t12 + t14;
  out1[3] = (in1[6] + in1[8] * out1_tmp) + in1[9] * t12;
  t14 = t13 + t15;
  out1[4] = (in1[7] + in1[8] * t14) + in1[9] * t13;
  out1[5] = 0.0;
  t6 = t12 + t16;
  out1_tmp += t16;
  out1[6] = (((in1[6] + in1[10] * (t16 + t26)) + in1[11] * t26) +
             in1[9] * (t6 + t26)) +
            in1[8] * (out1_tmp + t26);
  t4 = t13 + t17;
  t14 += t17;
  out1[7] = (((in1[7] + in1[10] * (t17 + t27)) + in1[11] * t27) +
             in1[9] * (t4 + t27)) +
            in1[8] * (t14 + t27);
  out1[8] = t11;
  out1[9] = ((in1[6] + in1[9] * t6) + in1[10] * t16) + in1[8] * out1_tmp;
  out1[10] = ((in1[7] + in1[9] * t4) + in1[10] * t17) + in1[8] * t14;
  out1[11] = t11;
  out1[12] = (((in1[6] + in1[10] * (t16 + t22)) + in1[11] * t22) +
              in1[9] * (t6 + t22)) +
             in1[8] * (out1_tmp + t22);
  out1[13] = (((in1[7] + in1[10] * (t17 + t24)) + in1[11] * t24) +
              in1[9] * (t4 + t24)) +
             in1[8] * (t14 + t24);
  out1[14] = t11;
  out1[15] = in1[6] + -t31;
  out1[16] = in1[7] + -t30;
  out1[17] = 0.0;
  out1[18] = in1[6] + -t30;
  out1[19] = in1[7] + t31;
  out1[20] = 0.0;
  out1[21] = in1[6] + t31;
  out1[22] = in1[7] + t30;
  out1[23] = 0.0;
  out1[24] = in1[6] + t30;
  out1[25] = in1[7] + -t31;
  out1[26] = 0.0;
}

// End of code generation (velocity_contact_points.cpp)
