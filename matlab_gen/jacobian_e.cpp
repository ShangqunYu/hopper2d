//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// jacobian_e.cpp
//
// Code generation for function 'jacobian_e'
//

// Include files
#include "jacobian_e.h"
#include <cmath>

// Function Definitions
void jacobian_e(const double in1[12], const double in2[17], double J_e[18])
{
  double J_e_tmp;
  double t11;
  double t12;
  double t13;
  double t18;
  double t2;
  double t4;
  // JACOBIAN_E
  //     J_e = JACOBIAN_E(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     25-Sep-2022 00:50:44
  t2 = in1[2] + in1[3];
  t4 = in1[4] + t2;
  t13 = (in1[5] + t4) + 1.5707963267948966;
  t11 = in2[12] * std::cos(t4);
  t12 = in2[12] * std::sin(t4);
  t18 = -(in2[14] * std::cos(t13));
  t13 = -(in2[14] * std::sin(t13));
  J_e[0] = 1.0;
  J_e[1] = 0.0;
  J_e[2] = 0.0;
  J_e[3] = 0.0;
  J_e[4] = 1.0;
  J_e[5] = 0.0;
  J_e_tmp = (in2[11] * std::cos(t2) + t11) + t18;
  J_e[6] = J_e_tmp + in2[16] * std::cos(in1[2]) / 2.0;
  t4 = (in2[11] * std::sin(t2) + t12) + t13;
  J_e[7] = t4 + in2[16] * std::sin(in1[2]) / 2.0;
  J_e[8] = 1.0;
  J_e[9] = J_e_tmp;
  J_e[10] = t4;
  J_e[11] = 1.0;
  J_e[12] = t11 + t18;
  J_e[13] = t12 + t13;
  J_e[14] = 1.0;
  J_e[15] = t18;
  J_e[16] = t13;
  J_e[17] = 1.0;
}

// End of code generation (jacobian_e.cpp)
