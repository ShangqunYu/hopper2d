//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// b_hopper.cpp
//
// Code generation for function 'b_hopper'
//

// Include files
#include "b_hopper.h"
#include <cmath>

// Function Definitions
void b_hopper(const double in1[12], const double in2[3], const double in3[17],
              double b[6])
{
  double ab_b_tmp;
  double b_b_tmp;
  double b_t23_tmp;
  double b_tmp;
  double bb_b_tmp;
  double c_b_tmp;
  double cb_b_tmp;
  double d_b_tmp;
  double e_b_tmp;
  double f_b_tmp;
  double g_b_tmp;
  double h_b_tmp;
  double i_b_tmp;
  double j_b_tmp;
  double k_b_tmp;
  double l_b_tmp;
  double m_b_tmp;
  double n_b_tmp;
  double o_b_tmp;
  double p_b_tmp;
  double q_b_tmp;
  double r_b_tmp;
  double s_b_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t16;
  double t17;
  double t18;
  double t2;
  double t22_tmp;
  double t23_tmp;
  double t24_tmp;
  double t25_tmp;
  double t26_tmp;
  double t27_tmp;
  double t27_tmp_tmp;
  double t28_tmp;
  double t29_tmp;
  double t3;
  double t30_tmp;
  double t31_tmp;
  double t36_tmp;
  double t39_tmp;
  double t4;
  double t42_tmp;
  double t46_tmp;
  double t48;
  double t49;
  double t5;
  double t50;
  double t50_tmp;
  double t51;
  double t52;
  double t53;
  double t6;
  double t7;
  double t8;
  double t9;
  double t_b_tmp;
  double u_b_tmp;
  double v_b_tmp;
  double w_b_tmp;
  double x_b_tmp;
  double y_b_tmp;
  // B_HOPPER
  //     B = B_HOPPER(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     20-Sep-2022 15:09:47
  t2 = std::cos(in1[5]);
  t3 = std::sin(in1[4]);
  t4 = in1[4] + in1[5];
  t5 = in1[2] + in1[3];
  t6 = in1[9] * in1[9];
  t7 = in1[10] * in1[10];
  t8 = in1[11] * in1[11];
  t9 = in1[8] * in1[8];
  t10 = std::cos(t4);
  t11 = std::cos(t5);
  t12 = in1[4] + t5;
  t13 = std::sin(t5);
  t4 += t5;
  t22_tmp = in3[10] * in3[12] * in3[4] * t2;
  t23_tmp = in1[9] * in3[10];
  b_t23_tmp = t23_tmp * in1[11];
  t5 = in3[10] * in1[10];
  t24_tmp = t5 * in1[11];
  t25_tmp = in3[10] * in1[11] * in1[8];
  t26_tmp = in3[9] * in3[11] * in3[3] * t3;
  t27_tmp_tmp = in3[9] * in1[9];
  t27_tmp = t27_tmp_tmp * in1[10];
  t28_tmp = in3[9] * in1[10] * in1[8];
  t29_tmp = in3[11] * in3[12] * in3[4] * t3;
  t30_tmp = in1[9] * in1[10];
  t31_tmp = in1[8] * in1[10];
  t14 = std::cos(t12);
  t16 = std::sin(t12);
  t17 = std::cos(t4);
  t18 = std::sin(t4);
  t39_tmp = in3[10] * in3[11] * in3[4];
  t42_tmp = t23_tmp * in1[10];
  t46_tmp = t5 * in1[8];
  t36_tmp = in3[11] * in3[15];
  t50_tmp = t23_tmp * in1[8];
  t50 = -(t50_tmp * in3[11] * in3[4] * t10 * 2.0);
  t52 = -(t39_tmp * t6 * t10);
  t53 = -(t39_tmp * t9 * t10);
  t48 = -(in3[9] * in3[15] * in3[3] * t16);
  t49 = -(in3[12] * in3[15] * in3[4] * t16);
  t51 = -(in3[10] * in3[15] * in3[4] * t17);
  b_tmp = in3[2] * in3[8];
  b_b_tmp = in3[3] * in3[9];
  c_b_tmp = in3[4] * in3[10];
  d_b_tmp = in3[3] * in3[11];
  e_b_tmp = in3[4] * in3[11];
  f_b_tmp = in3[4] * in3[12];
  t4 = in1[8] * in1[9];
  g_b_tmp = t4 * in3[11];
  h_b_tmp = b_tmp * t6;
  b_tmp *= t9;
  i_b_tmp = b_b_tmp * t6;
  j_b_tmp = b_b_tmp * t7;
  b_b_tmp *= t9;
  k_b_tmp = c_b_tmp * t6;
  l_b_tmp = c_b_tmp * t7;
  m_b_tmp = c_b_tmp * t8;
  c_b_tmp *= t9;
  n_b_tmp = d_b_tmp * t6;
  o_b_tmp = e_b_tmp * t6;
  d_b_tmp *= t9;
  e_b_tmp *= t9;
  p_b_tmp = f_b_tmp * t6;
  q_b_tmp = f_b_tmp * t7;
  f_b_tmp *= t9;
  r_b_tmp = t27_tmp * in3[3];
  s_b_tmp = t42_tmp * in3[4];
  t_b_tmp = b_t23_tmp * in3[4];
  u_b_tmp = t24_tmp * in3[4];
  v_b_tmp = in3[8] * in1[9] * in1[8] * in3[2];
  t12 = t27_tmp_tmp * in1[8];
  t23_tmp = t12 * in3[3];
  t27_tmp_tmp = t28_tmp * in3[3];
  w_b_tmp = t50_tmp * in3[4];
  x_b_tmp = t46_tmp * in3[4];
  y_b_tmp = t25_tmp * in3[4];
  ab_b_tmp = t30_tmp * in3[12] * in3[4];
  bb_b_tmp = g_b_tmp * in3[3];
  cb_b_tmp = g_b_tmp * in3[4];
  t4 = t4 * in3[12] * in3[4];
  t5 = t31_tmp * in3[12] * in3[4];
  b[0] = (((((((((((((((((((((((((((((h_b_tmp * t13 + b_tmp * t13) +
                                     i_b_tmp * t16) +
                                    j_b_tmp * t16) +
                                   b_b_tmp * t16) +
                                  k_b_tmp * t17) +
                                 l_b_tmp * t17) +
                                m_b_tmp * t17) +
                               c_b_tmp * t17) +
                              n_b_tmp * t13) +
                             o_b_tmp * t13) +
                            d_b_tmp * t13) +
                           e_b_tmp * t13) +
                          p_b_tmp * t16) +
                         q_b_tmp * t16) +
                        f_b_tmp * t16) +
                       r_b_tmp * t16 * 2.0) +
                      s_b_tmp * t17 * 2.0) +
                     t_b_tmp * t17 * 2.0) +
                    u_b_tmp * t17 * 2.0) +
                   v_b_tmp * t13 * 2.0) +
                  t23_tmp * t16 * 2.0) +
                 t27_tmp_tmp * t16 * 2.0) +
                w_b_tmp * t17 * 2.0) +
               x_b_tmp * t17 * 2.0) +
              y_b_tmp * t17 * 2.0) +
             ab_b_tmp * t16 * 2.0) +
            bb_b_tmp * t13 * 2.0) +
           cb_b_tmp * t13 * 2.0) +
          t4 * t16 * 2.0) +
         t5 * t16 * 2.0;
  b[1] = (((((((((((((((((((((((((((((-in3[15] * in3[2] - in3[3] * in3[15]) -
                                     in3[4] * in3[15]) -
                                    in3[0] * in3[15]) -
                                   h_b_tmp * t11) -
                                  b_tmp * t11) -
                                 i_b_tmp * t14) -
                                j_b_tmp * t14) -
                               b_b_tmp * t14) +
                              k_b_tmp * t18) +
                             l_b_tmp * t18) +
                            m_b_tmp * t18) +
                           c_b_tmp * t18) -
                          n_b_tmp * t11) -
                         o_b_tmp * t11) -
                        d_b_tmp * t11) -
                       e_b_tmp * t11) -
                      p_b_tmp * t14) -
                     q_b_tmp * t14) -
                    f_b_tmp * t14) -
                   r_b_tmp * t14 * 2.0) +
                  s_b_tmp * t18 * 2.0) +
                 t_b_tmp * t18 * 2.0) +
                u_b_tmp * t18 * 2.0) -
               v_b_tmp * t11 * 2.0) -
              t23_tmp * t14 * 2.0) -
             t27_tmp_tmp * t14 * 2.0) +
            w_b_tmp * t18 * 2.0) +
           x_b_tmp * t18 * 2.0) +
          y_b_tmp * t18 * 2.0) +
         ((((ab_b_tmp * t14 * -2.0 - bb_b_tmp * t11 * 2.0) -
            cb_b_tmp * t11 * 2.0) -
           t4 * t14 * 2.0) -
          t5 * t14 * 2.0);
  t4 = ((t22_tmp * t8 + b_t23_tmp * in3[12] * in3[4] * t2 * 2.0) +
        t24_tmp * in3[12] * in3[4] * t2 * 2.0) +
       t25_tmp * in3[12] * in3[4] * t2 * 2.0;
  b_tmp = ((((((((((((((((((t4 + t26_tmp * t7) +
                           t27_tmp * in3[11] * in3[3] * t3 * 2.0) +
                          t28_tmp * in3[11] * in3[3] * t3 * 2.0) +
                         t29_tmp * t7) +
                        t30_tmp * in3[11] * in3[12] * in3[4] * t3 * 2.0) +
                       t31_tmp * in3[11] * in3[12] * in3[4] * t3 * 2.0) +
                      -(in3[8] * in3[15] * in3[2] * t13)) +
                     -(t36_tmp * in3[3] * t13)) +
                    -(t36_tmp * in3[4] * t13)) +
                   t39_tmp * t7 * t10) +
                  t39_tmp * t8 * t10) +
                 t42_tmp * in3[11] * in3[4] * t10 * 2.0) +
                b_t23_tmp * in3[11] * in3[4] * t10 * 2.0) +
               t24_tmp * in3[11] * in3[4] * t10 * 2.0) +
              t46_tmp * in3[11] * in3[4] * t10 * 2.0) +
             t25_tmp * in3[11] * in3[4] * t10 * 2.0) +
            t48) +
           t49) +
          t51;
  b[2] = b_tmp;
  b[3] = b_tmp + in2[0];
  b[4] = ((((((((((((t4 + t48) + t49) + t50) + t51) + t52) + t53) + in2[1]) -
              t26_tmp * t6) -
             t26_tmp * t9) -
            t29_tmp * t6) -
           t29_tmp * t9) -
          t12 * in3[11] * in3[3] * t3 * 2.0) -
         g_b_tmp * in3[12] * in3[4] * t3 * 2.0;
  b[5] = (((((((((t50 + t51) + t52) + t53) + in2[2]) - t22_tmp * t6) -
             t22_tmp * t7) -
            t22_tmp * t9) -
           t42_tmp * in3[12] * in3[4] * t2 * 2.0) -
          t50_tmp * in3[12] * in3[4] * t2 * 2.0) -
         t46_tmp * in3[12] * in3[4] * t2 * 2.0;
}

// End of code generation (b_hopper.cpp)
