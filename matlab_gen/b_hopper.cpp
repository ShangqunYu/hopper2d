//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// b_hopper.cpp
//
// Code generation for function 'b_hopper'
//

// Include files
#include "b_hopper.h"
#include <cmath>

// Function Definitions
void b_hopper(const double in1[12], const double in2[3], const double in3[17],
              double b[6])
{
  double ab_b_tmp;
  double b_b_tmp;
  double b_b_tmp_tmp;
  double b_tmp;
  double b_tmp_tmp;
  double bb_b_tmp;
  double c_b_tmp;
  double c_b_tmp_tmp;
  double cb_b_tmp;
  double d_b_tmp;
  double d_b_tmp_tmp;
  double db_b_tmp;
  double e_b_tmp;
  double e_b_tmp_tmp;
  double eb_b_tmp;
  double f_b_tmp;
  double g_b_tmp;
  double h_b_tmp;
  double i_b_tmp;
  double j_b_tmp;
  double k_b_tmp;
  double l_b_tmp;
  double m_b_tmp;
  double n_b_tmp;
  double o_b_tmp;
  double p_b_tmp;
  double q_b_tmp;
  double r_b_tmp;
  double s_b_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t19;
  double t2;
  double t20;
  double t21;
  double t23;
  double t24;
  double t25;
  double t29_tmp;
  double t3;
  double t30_tmp;
  double t31_tmp;
  double t31_tmp_tmp;
  double t32_tmp;
  double t33_tmp;
  double t34_tmp;
  double t34_tmp_tmp;
  double t35_tmp;
  double t36_tmp;
  double t37_tmp;
  double t38_tmp;
  double t39_tmp;
  double t4;
  double t40_tmp;
  double t41_tmp;
  double t45;
  double t45_tmp;
  double t48;
  double t49_tmp;
  double t5;
  double t52;
  double t52_tmp;
  double t53_tmp;
  double t6;
  double t61;
  double t61_tmp;
  double t62;
  double t62_tmp;
  double t65;
  double t65_tmp;
  double t7;
  double t9;
  double t_b_tmp;
  double u_b_tmp;
  double v_b_tmp;
  double w_b_tmp;
  double x_b_tmp;
  double y_b_tmp;
  // B_HOPPER
  //     B = B_HOPPER(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     25-Sep-2022 00:50:43
  t2 = std::cos(in1[5]);
  t3 = std::cos(in1[2]);
  t4 = std::sin(in1[3]);
  t5 = std::sin(in1[4]);
  t6 = std::sin(in1[2]);
  t7 = in1[3] + in1[4];
  t9 = in1[2] + in1[3];
  t10 = in1[9] * in1[9];
  t11 = in1[10] * in1[10];
  t12 = in1[11] * in1[11];
  t13 = in1[8] * in1[8];
  t14 = std::cos(in1[4] + in1[5]);
  t15 = std::cos(t9);
  t16 = in1[5] + t7;
  t17 = std::sin(t7);
  t7 += in1[2];
  t19 = std::sin(t9);
  t29_tmp = in3[10] * in3[12] * in3[4] * t2;
  t9 = in1[9] * in3[10];
  t30_tmp = t9 * in1[11];
  t31_tmp_tmp = in3[10] * in1[10];
  t31_tmp = t31_tmp_tmp * in1[11];
  t32_tmp = in3[10] * in1[11] * in1[8];
  t33_tmp = in3[9] * in3[11] * in3[3] * t5;
  t34_tmp_tmp = in3[9] * in1[9];
  t34_tmp = t34_tmp_tmp * in1[10];
  t35_tmp = in3[9] * in1[10] * in1[8];
  t36_tmp = in3[11] * in3[12] * in3[4] * t5;
  t37_tmp = in1[9] * in1[10];
  t38_tmp = in1[8] * in1[10];
  t20 = std::cos(t16);
  t21 = std::cos(t7);
  t16 += in1[2];
  t23 = std::sin(t7);
  t45_tmp = in3[10] * in3[11] * in3[4];
  t45 = t45_tmp * t10 * t14;
  t48 = t45_tmp * t13 * t14;
  t49_tmp = t9 * in1[10];
  t52_tmp = t9 * in1[8];
  t52 = t52_tmp * in3[11] * in3[4] * t14 * 2.0;
  t53_tmp = t31_tmp_tmp * in1[8];
  t61_tmp = in3[9] * in3[16] * in3[3];
  t61 = t61_tmp * t13 * t17 / 2.0;
  t62_tmp = in3[12] * in3[16] * in3[4];
  t62 = t62_tmp * t13 * t17 / 2.0;
  t24 = std::cos(t16);
  t25 = std::sin(t16);
  t39_tmp = in3[9] * in3[15] * in3[3] * t23;
  t40_tmp = in3[12] * in3[15] * in3[4] * t23;
  t65_tmp = in3[10] * in3[16] * in3[4];
  t65 = t65_tmp * t13 * t20 / 2.0;
  t41_tmp = in3[10] * in3[15] * in3[4] * t24;
  b_tmp = in3[2] * in3[8];
  b_b_tmp = in3[3] * in3[9];
  c_b_tmp = in3[4] * in3[10];
  d_b_tmp = in3[3] * in3[11];
  e_b_tmp = in3[4] * in3[11];
  f_b_tmp = in3[4] * in3[12];
  b_tmp_tmp = in1[8] * in1[9];
  g_b_tmp = b_tmp_tmp * in3[11];
  h_b_tmp = b_tmp * t10;
  b_tmp *= t13;
  i_b_tmp = b_b_tmp * t10;
  j_b_tmp = b_b_tmp * t11;
  b_b_tmp *= t13;
  k_b_tmp = c_b_tmp * t10;
  l_b_tmp = c_b_tmp * t11;
  m_b_tmp = c_b_tmp * t12;
  c_b_tmp *= t13;
  n_b_tmp = d_b_tmp * t10;
  o_b_tmp = e_b_tmp * t10;
  d_b_tmp *= t13;
  e_b_tmp *= t13;
  p_b_tmp = f_b_tmp * t10;
  q_b_tmp = f_b_tmp * t11;
  f_b_tmp *= t13;
  r_b_tmp = in3[2] * in3[16];
  s_b_tmp = in3[3] * in3[16];
  t_b_tmp = in3[4] * in3[16];
  u_b_tmp = t34_tmp * in3[3];
  v_b_tmp = t49_tmp * in3[4];
  w_b_tmp = t30_tmp * in3[4];
  x_b_tmp = t31_tmp * in3[4];
  b_b_tmp_tmp = in3[8] * in1[9] * in1[8];
  y_b_tmp = b_b_tmp_tmp * in3[2];
  c_b_tmp_tmp = t34_tmp_tmp * in1[8];
  t7 = c_b_tmp_tmp * in3[3];
  t9 = t35_tmp * in3[3];
  t16 = t52_tmp * in3[4];
  t31_tmp_tmp = t53_tmp * in3[4];
  t34_tmp_tmp = t32_tmp * in3[4];
  d_b_tmp_tmp = t37_tmp * in3[12];
  ab_b_tmp = d_b_tmp_tmp * in3[4];
  bb_b_tmp = g_b_tmp * in3[3];
  cb_b_tmp = g_b_tmp * in3[4];
  b_tmp_tmp *= in3[12];
  db_b_tmp = b_tmp_tmp * in3[4];
  e_b_tmp_tmp = t38_tmp * in3[12];
  eb_b_tmp = e_b_tmp_tmp * in3[4];
  b[0] = (((((((((((((((((((((((((((((((h_b_tmp * t19 + b_tmp * t19) +
                                       i_b_tmp * t23) +
                                      j_b_tmp * t23) +
                                     b_b_tmp * t23) +
                                    k_b_tmp * t24) +
                                   l_b_tmp * t24) +
                                  m_b_tmp * t24) +
                                 c_b_tmp * t24) +
                                n_b_tmp * t19) +
                               o_b_tmp * t19) +
                              d_b_tmp * t19) +
                             e_b_tmp * t19) +
                            p_b_tmp * t23) +
                           q_b_tmp * t23) +
                          f_b_tmp * t23) +
                         r_b_tmp * t6 * t13 / 2.0) +
                        s_b_tmp * t6 * t13 / 2.0) +
                       t_b_tmp * t6 * t13 / 2.0) +
                      u_b_tmp * t23 * 2.0) +
                     v_b_tmp * t24 * 2.0) +
                    w_b_tmp * t24 * 2.0) +
                   x_b_tmp * t24 * 2.0) +
                  y_b_tmp * t19 * 2.0) +
                 t7 * t23 * 2.0) +
                t9 * t23 * 2.0) +
               t16 * t24 * 2.0) +
              t31_tmp_tmp * t24 * 2.0) +
             t34_tmp_tmp * t24 * 2.0) +
            ab_b_tmp * t23 * 2.0) +
           bb_b_tmp * t19 * 2.0) +
          cb_b_tmp * t19 * 2.0) +
         (db_b_tmp * t23 * 2.0 + eb_b_tmp * t23 * 2.0);
  b[1] = ((((((((((((((((((((((((((((-in3[15] * in3[2] - in3[3] * in3[15]) -
                                    in3[4] * in3[15]) -
                                   in3[0] * in3[15]) -
                                  h_b_tmp * t15) -
                                 b_tmp * t15) -
                                i_b_tmp * t21) -
                               j_b_tmp * t21) -
                              b_b_tmp * t21) +
                             k_b_tmp * t25) +
                            l_b_tmp * t25) +
                           m_b_tmp * t25) +
                          c_b_tmp * t25) -
                         n_b_tmp * t15) -
                        o_b_tmp * t15) -
                       d_b_tmp * t15) -
                      e_b_tmp * t15) -
                     p_b_tmp * t21) -
                    q_b_tmp * t21) -
                   f_b_tmp * t21) -
                  r_b_tmp * t3 * t13 / 2.0) -
                 s_b_tmp * t3 * t13 / 2.0) -
                t_b_tmp * t3 * t13 / 2.0) -
               u_b_tmp * t21 * 2.0) +
              v_b_tmp * t25 * 2.0) +
             w_b_tmp * t25 * 2.0) +
            x_b_tmp * t25 * 2.0) -
           y_b_tmp * t15 * 2.0) -
          t7 * t21 * 2.0) +
         ((((((((t9 * t21 * -2.0 + t16 * t25 * 2.0) + t31_tmp_tmp * t25 * 2.0) +
               t34_tmp_tmp * t25 * 2.0) -
              ab_b_tmp * t21 * 2.0) -
             bb_b_tmp * t15 * 2.0) -
            cb_b_tmp * t15 * 2.0) -
           db_b_tmp * t21 * 2.0) -
          eb_b_tmp * t21 * 2.0);
  b_tmp = in3[11] * in3[15];
  b_b_tmp = in3[15] * in3[16];
  c_b_tmp = in3[11] * in3[16];
  d_b_tmp = g_b_tmp * in3[16];
  t7 = ((t29_tmp * t12 + t30_tmp * in3[12] * in3[4] * t2 * 2.0) +
        t31_tmp * in3[12] * in3[4] * t2 * 2.0) +
       t32_tmp * in3[12] * in3[4] * t2 * 2.0;
  b_tmp = ((((((((((((((((((t7 + t33_tmp * t11) +
                           t34_tmp * in3[11] * in3[3] * t5 * 2.0) +
                          t35_tmp * in3[11] * in3[3] * t5 * 2.0) +
                         t36_tmp * t11) +
                        t37_tmp * in3[11] * in3[12] * in3[4] * t5 * 2.0) +
                       t38_tmp * in3[11] * in3[12] * in3[4] * t5 * 2.0) +
                      -(in3[8] * in3[15] * in3[2] * t19)) +
                     -(b_tmp * in3[3] * t19)) +
                    -(b_tmp * in3[4] * t19)) +
                   t45_tmp * t11 * t14) +
                  t45_tmp * t12 * t14) +
                 t49_tmp * in3[11] * in3[4] * t14 * 2.0) +
                t30_tmp * in3[11] * in3[4] * t14 * 2.0) +
               t31_tmp * in3[11] * in3[4] * t14 * 2.0) +
              t53_tmp * in3[11] * in3[4] * t14 * 2.0) +
             t32_tmp * in3[11] * in3[4] * t14 * 2.0) +
            -t39_tmp) +
           -t40_tmp) +
          -t41_tmp;
  e_b_tmp = in3[8] * in3[16] * in3[2] * t4;
  f_b_tmp = c_b_tmp * in3[3] * t4;
  c_b_tmp = c_b_tmp * in3[4] * t4;
  b[2] = (((((((((((((((((((((b_tmp - b_b_tmp * in3[2] * t6 / 2.0) -
                             b_b_tmp * in3[3] * t6 / 2.0) -
                            b_b_tmp * in3[4] * t6 / 2.0) +
                           e_b_tmp * t10 / 2.0) +
                          t61_tmp * t10 * t17 / 2.0) +
                         t61_tmp * t11 * t17 / 2.0) +
                        t65_tmp * t10 * t20 / 2.0) +
                       t65_tmp * t11 * t20 / 2.0) +
                      t65_tmp * t12 * t20 / 2.0) +
                     f_b_tmp * t10 / 2.0) +
                    c_b_tmp * t10 / 2.0) +
                   t62_tmp * t10 * t17 / 2.0) +
                  t62_tmp * t11 * t17 / 2.0) +
                 t34_tmp * in3[16] * in3[3] * t17) +
                t49_tmp * in3[16] * in3[4] * t20) +
               t30_tmp * in3[16] * in3[4] * t20) +
              t31_tmp * in3[16] * in3[4] * t20) +
             b_b_tmp_tmp * in3[16] * in3[2] * t4) +
            c_b_tmp_tmp * in3[16] * in3[3] * t17) +
           t35_tmp * in3[16] * in3[3] * t17) +
          t52_tmp * in3[16] * in3[4] * t20) +
         ((((((t53_tmp * in3[16] * in3[4] * t20 +
               t32_tmp * in3[16] * in3[4] * t20) +
              d_b_tmp_tmp * in3[16] * in3[4] * t17) +
             d_b_tmp * in3[3] * t4) +
            d_b_tmp * in3[4] * t4) +
           b_tmp_tmp * in3[16] * in3[4] * t17) +
          e_b_tmp_tmp * in3[16] * in3[4] * t17);
  b[3] = ((((((b_tmp + -t61) + -t62) + -t65) + in2[0]) - e_b_tmp * t13 / 2.0) -
          f_b_tmp * t13 / 2.0) -
         c_b_tmp * t13 / 2.0;
  b[4] = (((((((((((((((t7 + -t39_tmp) + -t40_tmp) + -t52) + -t41_tmp) + -t45) +
                   -t48) +
                  -t61) +
                 -t62) +
                -t65) +
               in2[1]) -
              t33_tmp * t10) -
             t33_tmp * t13) -
            t36_tmp * t10) -
           t36_tmp * t13) -
          c_b_tmp_tmp * in3[11] * in3[3] * t5 * 2.0) -
         g_b_tmp * in3[12] * in3[4] * t5 * 2.0;
  b[5] = ((((((((((-t52 + -t41_tmp) + -t45) + -t48) + -t65) + in2[2]) -
              t29_tmp * t10) -
             t29_tmp * t11) -
            t29_tmp * t13) -
           t49_tmp * in3[12] * in3[4] * t2 * 2.0) -
          t52_tmp * in3[12] * in3[4] * t2 * 2.0) -
         t53_tmp * in3[12] * in3[4] * t2 * 2.0;
}

// End of code generation (b_hopper.cpp)
