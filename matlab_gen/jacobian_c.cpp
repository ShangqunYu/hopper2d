//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// jacobian_c.cpp
//
// Code generation for function 'jacobian_c'
//

// Include files
#include "jacobian_c.h"
#include <cmath>

// Function Definitions
void jacobian_c(const double in1[12], const double in2[17], double J_c[18])
{
  double J_c_tmp;
  double t11;
  double t12;
  double t13;
  double t16;
  double t2;
  double t4;
  // JACOBIAN_C
  //     J_c = JACOBIAN_C(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     25-Sep-2022 00:50:44
  t2 = in1[2] + in1[3];
  t4 = in1[4] + t2;
  t13 = (in1[5] + t4) + 1.5707963267948966;
  t11 = in2[12] * std::cos(t4);
  t12 = in2[12] * std::sin(t4);
  t16 = in2[13] * std::cos(t13);
  t13 = in2[13] * std::sin(t13);
  J_c[0] = 1.0;
  J_c[1] = 0.0;
  J_c[2] = 0.0;
  J_c[3] = 0.0;
  J_c[4] = 1.0;
  J_c[5] = 0.0;
  J_c_tmp = (in2[11] * std::cos(t2) + t11) + t16;
  J_c[6] = J_c_tmp + in2[16] * std::cos(in1[2]) / 2.0;
  t4 = (in2[11] * std::sin(t2) + t12) + t13;
  J_c[7] = t4 + in2[16] * std::sin(in1[2]) / 2.0;
  J_c[8] = 1.0;
  J_c[9] = J_c_tmp;
  J_c[10] = t4;
  J_c[11] = 1.0;
  J_c[12] = t11 + t16;
  J_c[13] = t12 + t13;
  J_c[14] = 1.0;
  J_c[15] = t16;
  J_c[16] = t13;
  J_c[17] = 1.0;
}

// End of code generation (jacobian_c.cpp)
