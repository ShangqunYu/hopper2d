//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// jacobian_j.cpp
//
// Code generation for function 'jacobian_j'
//

// Include files
#include "jacobian_j.h"
#include <cmath>
#include <cstring>

// Function Definitions
void jacobian_j(const double in1[12], const double in2[17], double J_j[18])
{
  double t4;
  double t6;
  // JACOBIAN_J
  //     J_j = JACOBIAN_J(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     25-Sep-2022 00:50:44
  t4 = in2[16] * std::cos(in1[2]) / 2.0;
  t6 = -(in2[16] * std::sin(in1[2]) / 2.0);
  J_j[0] = 1.0;
  J_j[1] = 0.0;
  J_j[2] = 0.0;
  J_j[3] = 0.0;
  J_j[4] = 1.0;
  J_j[5] = 0.0;
  J_j[6] = -t4 + t6;
  J_j[7] = t4 + t6;
  std::memset(&J_j[8], 0, 10U * sizeof(double));
}

// End of code generation (jacobian_j.cpp)
